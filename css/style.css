html {
  background-color: #869960;
}

/* set font for all paragraphs */
body {
  font-family: Tahoma, sans-serif;
  font-size: 87%;
}
/* Cascading style sheets: Css rule begine with selector "h1". In Bracket we describe how we want to style selected element. We set property ex. :color" with value "orange". This pare propertic and value is call as a "declaration" */
/* h1 {
  color: black;
  text-align: left;
} */

/* section h1 {
  color: black;
  text-align: left;
} */

/* Types selector
p {
  color: black;
} */

/* Descendant selectors */
/* 
header p {
  color: black;
} */
/* Class selector: more reusable
.highlite {
  background-color: yellow;
}
.box-A {
  background-color: lightgray;
  padding: 30px;
  border: 3px black solid;
  margin-bottom: 10px;
  width: 250px;
  height: 250px;
  box-sizing: border-box;
}

.box-B {
  background-color: orange;
  width: 250px;
  height: 250px;
} */
/* Class selector with tyle selectors */

/* footer .highlite {
  background-color: aqua;
} */

/* Cascading: metafore of waterfall, sypiąco się, zpływająco się. It mean that Order of rules have matter. Html start with small default cascade theme, but css can overide this cascade wiht their own theme. Controle the rule when some conflict with rules appears */

/* Inheritance: Inherence allow to set from parents to chldren propertis*/

/* Specificity: Set from more general to more specific: from the most general to the most specificity:
type selectors: 
p {
    color: red;
}
desendant & type selectors:
header p {
    color: blue;
} 
body header p {
    color: green;
}
class selector:
.highlite {
    color: back;
}
cass & descendant:
footer .highlite {
    color: white
}
 */

/* UX: users' eyes focus on the center of the page */
.container {
  max-width: 940px;
  /* 
  margin-left: auto;
  margin-right: auto;
  equal:
   */
  margin: auto;
  background-color: #fff;
  padding-left: 40px;
  padding-right: 40px;
  /* Width of box changed, but we still want to our width as a max-width 940px. Padding will remain, but max-width stay no changed */
  box-sizing: border-box;
}

header {
  padding-top: 20px;
  padding-bottom: 20px;
  color: #617140;
}

footer {
  text-align: center;
  font-size: 85%;
  color: #999;
  padding: 20px 0 20px 0;
}

header h1 {
  margin: 0;
  font-weight: normal;
  font-size: 165%;
}

header p {
  margin: 0;
}

.content-area {
  border-top: 3px solid #e5e9dc;
  border-bottom: 3px solid #e5e9dc;
}

/* CLEANING FLOAT START
User float to set elements in column layout. Floated elements position themselfs next tu each other in a row. But parent element doesn't see floated children, so we need to clean float by ready exist solution. We add ".group" class in to parent class group.
 */
.main-area {
  width: 66%;
  float: left;
  padding-right: 40px;
  /* again: now total width of element is changed by padding 66% + 40px, but we still want our width to be 66%, so we use box-sizing: border-box */
  box-sizing: border-box;
}

.sidebar {
  width: 34%;
  float: left;
  background-color: #e5e9dc;
  padding: 20px 40px;
  box-sizing: border-box;
  font-size: 85%;
}
/* bad soultion of cleaning float for m children element, becouse we don't want to add empty and useless elements. Someone could ask why don't we put this class to the footer, or other element benife of the parent with floated children. That should work, but good practice is to create independent boxexs/containers for each group of elements. */
.fix {
  clear: both;
}
/* Good practice slution. This code mast be added once, and reuse */
.group:before,
.group:after {
  content: "";
  display: table;
}

.group:after {
  clear: both;
}

.group {
  zoom: 1;
}
/* CLEANING FLOAT END */
